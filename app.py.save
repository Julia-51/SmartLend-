import os
import sqlite3
from flask import Flask, render_template, request, redirect, url_for, session, send_file, flash
from werkzeug.utils import secure_filename
from werkzeug.security import generate_password_hash, check_password_hash
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from datetime import datetime

# -----------------------
# CONFIGURATION
# -----------------------
app = Flask(__name__)
app.secret_key = "supersecretkey"

UPLOAD_FOLDER = "uploads"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER

ALLOWED_EXTENSIONS = {"png", "jpg", "jpeg", "pdf"}
MAX_FILE_SIZE = 5 * 1024 * 1024  # 5 MB

DATABASE = "smartlend.db"

# -----------------------
# MULTI-LANGUES
# -----------------------
translations = {
    "fr": {
        "home": "Accueil",
        "welcome": "Bienvenue sur SmartLend",
        "slogan": "Votre partenaire de confiance pour les prêts rapides et sécurisés.",
        "get_started": "Commencer",
        "register": "Inscription",
        "login": "Connexion",
        "logout": "Déconnexion",
        "username": "Nom d'utilisateur",
        "password": "Mot de passe",
        "already_account": "Déjà un compte ?",
        "no_account": "Pas encore de compte ?",
        "dashboard": "Tableau de bord",
        "welcome_user": "Bienvenue",
        "loan_request": "Demande de prêt",
        "apply": "Soumettre",
        "your_loans": "Vos prêts",
        "no_loans": "Aucun prêt trouvé",
        "contact": "Contactez-nous : smartlend@outlook.fr",
    },
    "en": {
        "home": "Home",
        "welcome": "Welcome to SmartLend",
        "slogan": "Your trusted partner for fast and secure loans.",
        "get_started": "Get Started",
        "register": "Register",
        "login": "Login",
        "logout": "Logout",
        "username": "Username",
        "password": "Password",
        "already_account": "Already have an account?",
        "no_account": "Don’t have an account?",
        "dashboard": "Dashboard",
        "welcome_user": "Welcome",
        "loan_request": "Loan Request",
        "apply": "Apply",
        "your_loans": "Your Loans",
        "no_loans": "No loans found",
        "contact": "Contact us: smartlend@outlook.fr",
    }
}

def get_lang():
    return request.args.get("lang", "fr")

# -----------------------
# UTILITAIRES
# -----------------------
def allowed_file(filename):
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_EXTENSIONS

def init_db():
    with sqlite3.connect(DATABASE) as conn:
        c = conn.cursor()
        c.execute("""CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE,
            password TEXT,
            role TEXT DEFAULT 'user'
        )""")
        c.execute("""CREATE TABLE IF NOT EXISTS loans (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            fullname TEXT,
            dob TEXT,
            country TEXT,
            address TEXT,
            email TEXT,
            phone TEXT,
            id_card TEXT,
            id_photo TEXT,
            amount REAL,
            income REAL,
            duration INTEGER,
            purpose TEXT,
            fee REAL,
            status TEXT DEFAULT 'En attente',
            created_at TEXT
        )""")
    conn.close()

init_db()

# -----------------------
# ROUTES UTILISATEURS
# -----------------------
@app.route("/")
def index():
    lang = get_lang()
    return render_template("index.html", t=translations[lang], lang=lang)

@app.route("/register", methods=["GET", "POST"])
def register():
    lang = get_lang()
    if request.method == "POST":
        username = request.form["username"]
        password = generate_password_hash(request.form["password"])
        with sqlite3.connect(DATABASE) as conn:
            try:
                conn.execute("INSERT INTO users (username, password, role) VALUES (?, ?, ?)", (username, password, "user"))
                conn.commit()
                return redirect(url_for("login", lang=lang))
            except sqlite3.IntegrityError:
                flash("Nom d’utilisateur déjà utilisé")
    return render_template("register.html", t=translations[lang], lang=lang)

@app.route("/login", methods=["GET", "POST"])
def login():
    lang = get_lang()
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]
        with sqlite3.connect(DATABASE) as conn:
            c = conn.cursor()
            c.execute("SELECT * FROM users WHERE username=?", (username,))
            user = c.fetchone()
            if user and check_password_hash(user[2], password):
                session["user_id"] = user[0]
                session["username"] = user[1]
                session["role"] = user[3]
                return redirect(url_for("dashboard", lang=lang))
            else:
                flash("Identifiants incorrects")
    return render_template("login.html", t=translations[lang], lang=lang)

@app.route("/logout")
def logout():
    session.clear()
    return redirect(url_for("index"))

@app.route("/dashboard", methods=["GET"])
def dashboard():
    lang = get_lang()
    if "user_id" not in session:
        return redirect(url_for("login", lang=lang))
    with sqlite3.connect(DATABASE) as conn:
        c = conn.cursor()
        c.execute("SELECT id, amount, status FROM loans WHERE user_id=?", (session["user_id"],))
        loans = [{"id": row[0], "amount": row[1], "status": row[2]} for row in c.fetchall()]
    return render_template("dashboard.html", t=translations[lang], lang=lang, user=session["username"], loans=loans)

@app.route("/loan_request", methods=["POST"])
def loan_request():
    if "user_id" not in session:
        return redirect(url_for("login"))

    fullname = request.form["fullname"]
    dob = request.form["dob"]
    country = request.form["country"]
    address = request.form["address"]
    email = request.form["email"]
    phone = request.form["phone"]
    id_card = request.form["id_card"]
    amount = float(request.form["amount"])
    income = float(request.form["income"])
    duration = int(request.form["duration"])
    purpose = request.form["purpose"]

    # Vérification upload
    id_photo = request.files["id_photo"]
    if id_photo and allowed_file(id_photo.filename):
        filename = secure_filename(f"{session['username']}_{datetime.now().strftime('%Y%m%d%H%M%S')}_{id_photo.filename}")
        filepath = os.path.join(app.config["UPLOAD_FOLDER"], filename)
        id_photo.save(filepath)
    else:
        flash("Format de fichier non autorisé")
        return redirect(url_for("dashboard"))

    fee = round(amount * 0.10, 2)
    created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    with sqlite3.connect(DATABASE) as conn:
        conn.execute("""INSERT INTO loans 
            (user_id, fullname, dob, country, address, email, phone, id_card, id_photo, amount, income, duration, purpose, fee, status, created_at) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (session["user_id"], fullname, dob, country, address, email, phone, id_card, filepath, amount, income, duration, purpose, fee, "En attente", created_at))
        conn.commit()

    return redirect(url_for("dashboard"))

# -----------------------
# ADMIN
# -----------------------
@app.route("/admin", methods=["GET"])
def admin_panel():
    if "role" not in session or session["role"] != "admin":
        return "Accès refusé"
    lang = get_lang()
    with sqlite3.connect(DATABASE) as conn:
        c = conn.cursor()
        c.execute("SELECT id, fullname, amount, fee, status FROM loans")
        loans = [{"id": row[0], "fullname": row[1], "amount": row[2], "fee": row[3], "status": row[4]} for row in c.fetchall()]
    return render_template("admin.html", t=translations[lang], lang=lang, loans=loans)

@app.route("/admin/validate/<int:loan_id>", methods=["POST"])
def validate_loan(loan_id):
    if "role" not in session or session["role"] != "admin":
        return "Accès refusé"
    with sqlite3.connect(DATABASE) as conn:
        conn.execute("UPDATE loans SET status='Validé' WHERE id=?", (loan_id,))
        conn.commit()
    generate_contract(loan_id)
    return redirect(url_for("admin_panel"))

@app.route("/admin/reject/<int:loan_id>", methods=["POST"])
def reject_loan(loan_id):
    if "role" not in session or session["role"] != "admin":
        return "Accès refusé"
    with sqlite3.connect(DATABASE) as conn:
        conn.execute("UPDATE loans SET status='Rejeté' WHERE id=?", (loan_id,))
        conn.commit()
    return redirect(url_for("admin_panel"))

# -----------------------
# CONTRAT PDF
# -----------------------
def generate_contract(loan_id):
    with sqlite3.connect(DATABASE) as conn:
        c = conn.cursor()
        c.execute("SELECT fullname, amount, fee, duration, purpose, created_at FROM loans WHERE id=?", (loan_id,))
        loan = c.fetchone()
        if not loan:
            return

    filename = f"contract_{loan_id}.pdf"
    filepath = os.path.join("uploads", filename)

    c = canvas.Canvas(filepath, pagesize=A4)
    c.setFont("Helvetica-Bold", 16)
    c.drawCentredString(300, 800, "Contrat de prêt - SmartLend")

    c.setFont("Helvetica", 12)
    c.drawString(100, 760, f"Nom : {loan[0]}")
    c.drawString(100, 740, f"Montant : {loan[1]} €")
    c.drawString(100, 720, f"Frais (10%) : {loan[2]} €")
    c.drawString(100, 700, f"Durée : {loan[3]} mois")
    c.drawString(100, 680, f"Objectif : {loan[4]}")
    c.drawString(100, 660, f"Date : {loan[5]}")

    c.drawString(100, 600, "Signature Client : ___________________")
    c.drawString(100, 580, "Signature SmartLend : _______________")

    # Footer
    c.setFont("Helvetica-Oblique", 10)
    c.drawString(100, 100, "SmartLend © 2025 - Contact : smartlend@outlook.fr")

    c.save()
    return filepath

@app.route("/download_contract/<int:loan_id>")
def download_contract(loan_id):
    filepath = os.path.join("uploads", f"contract_{loan_id}.pdf")
    if os.path.exists(filepath):
        return send_file(filepath, as_attachment=True)
    return "Contrat non trouvé"

# -----------------------
# LANCEMENT
# -----------------------
if __name__ == "__main__":
    app.run(debug=True)
from werkzeug.security import generate_password_hash

def init_admin():
    conn = sqlite3.connect("smartlend.db")
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM users")
    count = cur.fetchone()[0]
    if count == 0:
        hashed_pw = generate_password_hash("admin123")
        cur.execute("INSERT INTO users (username, password, role) VALUES (?, ?, ?)",
                    ("admin", hashed_pw, "admin"))
        conn.commit()
        print("✅ Compte admin créé : username=admin | password=admin123")
    conn.close()

# Appel après la création des tables
init_admin()
